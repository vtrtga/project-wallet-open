{"version":3,"sources":["actions/ActionTypes.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","actions/index.js","components/Form.js","components/Header.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["SUBMIT_LOGIN_FORM","GET_PRICE","SAVE_CURRENCIES","INITIAL_STATE","email","user","state","action","type","currencies","expenses","editor","idToEdit","wallet","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","password","isButtonDisabled","buttonDisableOrEnable","match","length","setState","handleOnChange","target","value","name","handleSubmit","props","history","dispatchEmail","push","this","className","htmlFor","onChange","onClick","disabled","React","Component","connect","dispatch","createActionSubmitForm","Form","id","description","method","currency","tag","onHandleChange","onHandleClick","toGlobalState","stateStorage","prev","placeholder","map","met","key","cat","payload","fetch","resp","json","data","exchangeRates","Header","total","reduce","acc","curr","exchange","ask","toFixed","Table","param","ex","Number","split","Wallet","thunkCurrencies","Object","keys","filter","c","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e99671c.chunk.js","sourcesContent":["export const SUBMIT_LOGIN_FORM = 'SUBMIT_LOGIN_FORM';\nexport const GET_PRICE = 'GET_PRICE';\nexport const SAVE_CURRENCIES = 'SAVE_CURRENCIES';\n","import { SUBMIT_LOGIN_FORM } from '../actions/ActionTypes';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SUBMIT_LOGIN_FORM:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { SAVE_CURRENCIES, GET_PRICE } from '../actions/ActionTypes';\n\nconst INITIAL_STATE = {\n  currencies: [], // array de string\n  expenses: [], // array de objetos, com cada objeto tendo as chaves id, value, currency, method, tag, description e exchangeRates\n  editor: false, // valor booleano que indica de uma despesa está sendo editada\n  idToEdit: 0, // valor numérico que armazena o id da despesa que esta sendo editada\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  case GET_PRICE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        { ...action.state }],\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createActionSubmitForm } from '../actions/index';\n\nclass Login extends React.Component {\n  state = {\n    email: '',\n    password: '',\n    isButtonDisabled: true,\n  }\n\n  buttonDisableOrEnable = () => {\n    const { email, password } = this.state;\n    const regExp = /\\w+@[a-z]+.com/g;\n    const magicNumber = 6;\n\n    if (email.match(regExp) && password.length >= magicNumber) {\n      return this.setState({ isButtonDisabled: false });\n    }\n    return this.setState({ isButtonDisabled: true });\n  }\n\n  handleOnChange = ({ target }) => {\n    const { value, name } = target;\n    this.setState({ [name]: value },\n      () => this.buttonDisableOrEnable());\n  }\n\n  handleSubmit = () => {\n    const { history, dispatchEmail } = this.props;\n    const { email } = this.state;\n    dispatchEmail(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { isButtonDisabled, password, email } = this.state;\n    return (\n      <div className=\"area-login\">\n        <div className=\"Login\">\n          <h1>Login</h1>\n          <label htmlFor=\"email\">\n            Email\n            <input\n              name=\"email\"\n              type=\"email\"\n              onChange={ this.handleOnChange }\n              data-testid=\"email-input\"\n              value={ email }\n            />\n          </label>\n          <label htmlFor=\"password\">\n            Senha\n            <input\n              value={ password }\n              name=\"password\"\n              type=\"password\"\n              onChange={ this.handleOnChange }\n              data-testid=\"password-input\"\n            />\n          </label>\n          <button\n            onClick={ this.handleSubmit }\n            disabled={ isButtonDisabled }\n            type=\"button\"\n          >\n            Entrar\n\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatchEmail: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchEmail: (email) => dispatch(createActionSubmitForm(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import\n{ GET_PRICE,\n  SAVE_CURRENCIES,\n  SUBMIT_LOGIN_FORM,\n}\nfrom './ActionTypes';\n\nexport const createActionSubmitForm = (email) => ({\n  type: SUBMIT_LOGIN_FORM,\n  email,\n});\n\nexport const createWalletActions = (value) => ({\n  type: WALLET_FORM,\n  payload: value,\n});\n\nexport const getPrice = (state) => ({\n  type: GET_PRICE,\n  state,\n});\n\nexport const saveCurrencies = (currencies) => ({\n  type: SAVE_CURRENCIES,\n  currencies,\n});\n\nexport function fetchCurrencies() {\n  return async (dispatch) => {\n    const resp = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await resp.json();\n    const curr = Object.keys(data).filter((c) => c !== 'USDT');\n    dispatch(saveCurrencies(curr));\n  };\n}\nexport function fetchPrice(payload) {\n  return async (dispatch) => {\n    const resp = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await resp.json();\n    payload.exchangeRates = { ...data };\n    dispatch(getPrice(payload));\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchPrice } from '../actions';\n\nclass Form extends Component {\n  state = {\n    id: 0,\n    value: 0,\n    description: '',\n    method: 'Dinheiro',\n    currency: 'USD',\n    tag: 'Alimentação',\n  }\n\n  onHandleChange = ({ target }) => {\n    const { value, name } = target;\n    this.setState({ [name]: value });\n  }\n\n  onHandleClick = () => {\n    const { description, value, method, currency, tag, id } = this.state;\n    const { toGlobalState } = this.props;\n    const stateStorage = {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n    };\n    this.setState((prev) => ({\n      id: prev.id + 1,\n      value: 0,\n    }));\n    toGlobalState(stateStorage);\n  }\n\n  render() {\n    const { description, value, method, currency, tag } = this.state;\n    const { currencies } = this.props;\n    const paymentMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const categories = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <form className=\"Form\">\n        <input\n          placeholder=\"Descrição\"\n          value={ description }\n          onChange={ this.onHandleChange }\n          name=\"description\"\n          data-testid=\"description-input\"\n          type=\"text\"\n        />\n        <input\n          value={ value }\n          onChange={ this.onHandleChange }\n          placeholder=\"Valor\"\n          name=\"value\"\n          data-testid=\"value-input\"\n          type=\"number\"\n        />\n        <label htmlFor=\"method\">\n          <select\n            name=\"method\"\n            id=\"method\"\n            value={ method }\n            data-testid=\"method-input\"\n            onChange={ this.onHandleChange }\n          >\n            {\n              paymentMethods.map((met) => (\n                <option key={ met }>{ met }</option>\n              ))\n            }\n          </select>\n        </label>\n        <label htmlFor=\"moeda\">\n          Moeda\n          <select\n            value={ currency }\n            onChange={ this.onHandleChange }\n            id=\"moeda\"\n            name=\"currency\"\n          >\n            {\n              currencies.map((key) => (\n                <option key={ key } value={ key }>{ key }</option>\n              ))\n            }\n          </select>\n        </label>\n        <label htmlFor=\"category\">\n          Categoria\n          <select\n            value={ tag }\n            onChange={ this.onHandleChange }\n            name=\"tag\"\n            id=\"category\"\n            data-testid=\"tag-input\"\n          >\n            {\n              categories.map((cat) => (\n                <option key={ cat } value={ cat }>{ cat }</option>\n              ))\n            }\n          </select>\n        </label>\n        <button onClick={ this.onHandleClick } type=\"button\">Adicionar despesa</button>\n      </form>\n    );\n  }\n}\nconst mapDispatchToProps = (dispatch) => ({\n  toGlobalState: (state) => dispatch(fetchPrice(state)),\n});\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf.isRequired,\n  toGlobalState: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Form from './Form';\n\nclass Header extends Component {\n  render() {\n    const { email, expenses } = this.props;\n    const total = expenses.reduce((acc, curr) => {\n      const exchange = curr.exchangeRates[curr.currency].ask;\n      return acc + (curr.value * exchange);\n    }, 0);\n    return (\n      <header className=\"Header\">\n        <span className=\"email\" data-testid=\"email-field\">{ email }</span>\n        <strong className=\"total-field\" data-testid=\"total-field\">\n          {\n            expenses.length === 0 ? 0\n              : total.toFixed(2)\n          }\n\n        </strong>\n        <strong className=\"currency\" data-testid=\"header-currency-field\">BRL</strong>\n        <Form />\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Table extends Component {\n  render() {\n    const tableParams = ['Descrição',\n      'Tag',\n      'Método de pagamento',\n      'Valor',\n      'Moeda',\n      'Câmbio utilizado',\n      'Valor convertido',\n      'Moeda de conversão',\n      'Editar/Excluir'];\n    const { expenses } = this.props;\n    return (\n      <table className=\"Table\">\n        <tr className=\"params\">\n          {\n            tableParams.map((param) => <th key={ param }>{ param }</th>)\n          }\n        </tr>\n\n        {\n          expenses.map((ex) => (\n            <tr key={ ex.id }>\n              <td>{ex.description}</td>\n              <td>{ex.tag}</td>\n              <td>{ex.method}</td>\n              <td>{Number(ex.value).toFixed(2)}</td>\n              <td>\n                {\n                  ex.exchangeRates[ex.currency].name.split('/')[0]\n                }\n\n              </td>\n              <td>\n                {\n                  Number(ex.exchangeRates[ex.currency].ask).toFixed(2)\n                }\n              </td>\n              <td>\n                {Number(ex.exchangeRates[ex.currency].ask * ex.value)\n                  .toFixed(2)}\n\n              </td>\n              <td>Real</td>\n              <td>\n                <button type=\"button\">Editar</button>\n                <button type=\"button\">Excluir</button>\n              </td>\n            </tr>\n          ))\n\n        }\n\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf.isRequired,\n};\n\nexport default connect(mapStateToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies } from '../actions';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  async componentDidMount() {\n    const { thunkCurrencies } = this.props;\n    thunkCurrencies();\n  }\n\n  render() {\n    return (\n      <div className=\"Wallet\">\n        <Header />\n        <Table />\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = (dispatch) => ({\n  thunkCurrencies: () => dispatch(fetchCurrencies()),\n});\n\nWallet.propTypes = {\n  thunkCurrencies: PropTypes.func.isRequired,\n};\nexport default connect(null, mapDispatchToProps)(Wallet);\n// export default Wallet;\n","import React from 'react';\nimport './Login.css';\nimport './Wallet.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport store from './store';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}